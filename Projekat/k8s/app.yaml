apiVersion: apps/v1
kind: Deployment
metadata:
  name: sensor
spec:
  selector:
    matchLabels:
      app: sensor
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: sensor
    spec:
      containers:
      - name: sensor
        image: stefan001/service-meshv2:sensor
        resources:
          limits:
            memory: "128Mi"
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        - name: SERVICEDIR
          value: services
        - name: TRANSPORTER
          value: nats://nats:4222
        imagePullPolicy: Always
        volumeMounts:
        - name: mydir
          mountPath: /dir
      volumes:
      - name: mydir
        hostPath:
          path: /data
---
apiVersion: v1
kind: Service
metadata:
  name: sensor
spec:
  selector:
    app: sensor
  ports:
    - name: http
      port: 8085
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data
spec:
  selector:
    matchLabels:
      app: data
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: data
    spec:
      containers:
      - name: data
        image: stefan001/service-meshv2:data
        resources:
          limits:
            memory: "128Mi"
        env:
        - name: INFLUXDB_HOST
          value: influx
        - name: INFLUXDB_PORT
          value: '8086'
        - name: ADMIN_USER
          value: admin
        - name: ADMIN_PASSWORD
          value: admin
        - name: INFLUXDB_DATABASE
          value: SensorDataIOT
        - name: SERVICEDIR
          value: services
        - name: TRANSPORTER
          value: nats://nats:4222
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: data
spec:
  selector:
    app: data
  ports:
    - name: http
      port: 8081
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics
spec:
  selector:
    matchLabels:
      app: analytics
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: analytics
    spec:
      containers:
      - name: analytics
        image: stefan001/service-meshv2:analytics
        resources:
          limits:
            memory: "128Mi"
        env:
        - name: INFLUXDB_HOST
          value: influx
        - name: INFLUXDB_PORT
          value: '8086'
        - name: ADMIN_USER
          value: admin
        - name: ADMIN_PASSWORD
          value: admin
        - name: INFLUXDB_DATABASE
          value: SensorDataIOTA
        - name: SERVICEDIR
          value: services
        - name: TRANSPORTER
          value: nats://nats:4222
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: analytics
spec:
  selector:
    app: analytics
  ports:
    - name: http
      port: 5000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: command
spec:
  selector:
    matchLabels:
      app: command
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: command
    spec:
      containers:
      - name: command
        image: stefan001/service-meshv2:command
        resources:
          limits:
            memory: "128Mi"
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        - name: SERVICEDIR
          value: services
        - name: TRANSPORTER
          value: nats://nats:4222
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: command
spec:
  selector:
    app: command
  ports:
    - name: http
      port: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
spec:
  selector:
    matchLabels:
      app: gateway
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: stefan001/service-meshv2:gateway
        resources:
          limits:
            memory: "128Mi"
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        - name: SERVICEDIR
          value: services
        - name: TRANSPORTER
          value: nats://nats:4222
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  selector:
    app: gateway
  ports:
    - name: http
      port: 4000
      nodePort: 31516
  type: NodePort
---
apiVersion: siddhi.io/v1alpha2
kind: SiddhiProcess
metadata:
  name: siddhi
spec:
  apps:
    - script: |
        @App:name("appsiddhi")

        @App:description("Analyzer of beach quality.")

        @source(type = 'http', receiver.url='${RECEIVER_URL}', @map(type = 'json'))
        @Annotation(property = "value")
        define stream InputStream (name string, temp int, bat int, waveperiod int, time string);

        @sink(type='http', publisher.url='http://gateway:4000/CEP',method='POST', headers='Content-type:application/json', basic.auth.enabled='false', @map(type='json'))
        define stream OutputStream (name string, temp int, bat int, waveperiod int, time string, warning string );

        @info(name = 'TemperatureQuery')
        from InputStream#window.length(1)[temp > 0]
        select name, temp, bat, waveperiod, time, 
        ifThenElse(temp<15, "Cold water" , ifThenElse(temp<25, "Medium temperature of water", "No warning") ) as warning
        insert into OutputStream;

        @info(name = 'BatteryQuery')
        from InputStream#window.length(1)[bat > 0]
        select name, temp, bat, waveperiod, time,
        ifThenElse(bat<10, "Low battery level", "No warning") as warning
        insert into OutputStream;

        @info(name = 'WavePeriodQuery')
        from InputStream#window.length(1)[waveperiod > 0]
        select name, temp, bat, waveperiod, time,
        ifThenElse(waveperiod<4, "Low wave period", "No warning") as warning
        insert into OutputStream;

  container:
    env:
      - name: RECEIVER_URL
        value: "http://0.0.0.0:8006/analytics"
    image: "siddhiio/siddhi-runner-ubuntu:5.1.0"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt
spec:
  selector:
    matchLabels:
      app: mqtt
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: mqtt
    spec:
      containers:
      - name: mqtt
        image: eclipse-mosquitto:1.6.12
        ports:
        - containerPort: 1883
---
apiVersion: v1
kind: Service
metadata:
  name: mqtt
spec:
  selector:
    app: mqtt
  ports:
    - name: tcp
      port: 1883
      targetPort: 1883
      protocol: TCP
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
spec:
  selector:
    matchLabels:
      app: influx-db
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: influx-db
    spec:
      volumes:
      - name: influxdb-storage
        persistentVolumeClaim:
          claimName: influxdb-pvc
      containers:
      - name: influxdb
        image: influxdb:1.8.10
        ports:
        - containerPort: 8086
        volumeMounts:
        - name: influxdb-storage
          mountPath: /var/lib/influx.db
---
apiVersion: v1
kind: Service
metadata:
  name: influx
spec:
  selector:
    app: influx-db
  ports:
    - name: http
      port: 8086
      targetPort: 8086
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 128Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats-deploy
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: nats
    spec:
      containers:
      - name: nats
        image: nats
---
apiVersion: v1
kind: Service
metadata:
  name: nats
spec:
  selector:
    app: nats
  ports:
    - name: tcp
      protocol: TCP
      port: 4222
      targetPort: 4222
    - name: tcp-monitoring
      protocol: TCP
      port: 8222
      targetPort: 8222
  type: ClusterIP
---